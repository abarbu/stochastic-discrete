[[tags: egg math]]
[[toc:]]

This page is maintained in the package's
[[https://github.com/abarbu/stochastic-discrete|github repository]]

== stochastic-discrete

This implements a stochastic programming language for discrete
distributions along with a stochastic constraint satisfaction problem
solver.

Distributions are lists of dotted pairs, an arbitrary object followed
by a probability (e.g. ''((a . 0.2) (b . 0.5) (c . 0.3))''). They must
be non-negative, but may sum to less than one. The output of
distribution of a stochastic program is not normalized to sum to 1;
you'll have to do that yourself if that's what you're after.

This egg is an extension to the ''nondeterminism'' and ''csp'' eggs
and works very similarly. Domains are distributions, a csp (constraint
satisfaction problem) is a gm (graphical model), fail is bottom,
unwedge-trail is forget-trail.

=== Example

[[Image:https://raw.github.com/abarbu/stochastic-discrete/master/bayes-net-example.png]]

We can implement the above with a stochastic program, I've kept this
simple using only ''flip'' but it could be more succinctly written
with ''draw''.

   (define (example1)
    (let* ((rain (flip 0.2))
           (sprinkler (if rain (flip 0.01) (flip 0.4)))
           (grass-wet (cond ((and (not sprinkler) (not rain)) (flip 0))
                            ((and (not sprinkler) rain)       (flip 0.8))
                            ((and sprinkler (not rain))       (flip 0.9))
                            ((and sprinkler rain)             (flip 0.99)))))
     (list rain sprinkler grass-wet)))

We can then query the program, say we want to answer the same question
as the Wikipedia page for Bayesian networks ("What is the probability
that it is raining, given the grass is wet?")

   (normalize-distribution
    (distribution
     (let ((r (example1)))
      (when (not (last r)) (bottom))
      (first r))))

This will return

    ((#f . 0.642312324367724) (#t . 0.357687675632276))

Which agrees with Wikipedia's computation of 35.77%.

=== High-level API

==== Generation

<procedure>(flip alpha)</procedure>

Flip a biased coin with the probability of true being ''alpha''.

<procedure>(bottom)</procedure>

The analog to the nondeterminism egg's ''(fail)'', this part of the
computation will be pruned.

<procedure>(forget-trail)</procedure>

The equivalent to the nondeterminism egg's ''(unwedge-trail)''. On
errors backtracking information will be left on the internal stack,
this resets the state of all computations carried out by this egg.

<procedure>(draw distribution)</procedure>

Given a distribution of the form ''((a . 0.2) (b . 0.5) (c . 0.3))''
will return ''a'', ''b'', and ''c'' with the specified
probabilities. It will not normalize the input distribution which
might sum to less than 1.

<procedure>(current-probability)</procedure>

During a computation get the current probability, useful for
branch-and-bound and similar techniques.

==== Graphical models with constraints

<procedure>(create-distribution-variable distribution)</procedure>

Analogous to the ''csp'' egg's ''create-domain-variable''.

<procedure>(gm-solution ds)</procedure>

Given that a stochastic csp has been defined over the given domain
variables, compute their bindings and find all solutions.

<procedure>(gm-bb-solution ds)</procedure>
<procedure>(gm-bb-predict-solution ds)</procedure>
<procedure>(gm-bb-predict-solution-with-start ds start)</procedure>

Given that a stochastic csp has been defined over the given domain
variables, compute their bindings and find all solutions using branch
and bound. Only really useful when searching for the most likely
solution. ''predict'' computes an upper-bound on the future
probability greatly improving the performance of
branch-and-bound. ''-with-start'' allows you to provide an initial
lower-bound on the maximal probability, again greatly improving the
performance of branch-and-bound.

<procedure>(gm-assert-constraint! constraint . distribution-variables)</procedure>

Analogous to the ''csp'' egg's ''assert-constraint!'' Assert a
constraint, a function which returns a boolean, on the distribution
variables. Just like the ''csp'' egg it inspects a global,
''*gm-strategy*'' in this case, to determine the kind of constraint it
should apply. Arc consistency, ''ac'', is the default.

<procedure>(gm-assert-constraint-efd! constraint ds)</procedure>
<procedure>(gm-assert-constraint-fc! constraint ds)</procedure>
<procedure>(gm-assert-constraint-vp! constraint ds)</procedure>
<procedure>(gm-assert-constraint-gfc! constraint ds)</procedure>
<procedure>(gm-assert-constraint-ac! constraint ds)</procedure>

Explicitly apply a constraint of a given type to some distribution
variables.

=== Execution

<macro>(support ...)</macro>
<macro>(probability ...)</macro>
<macro>(expected-value ...)</macro>
<macro>(entropy ...)</macro>

Stochastic computations can only be carried out inside one of these
environmnets.

<procedure>(most-likely-value distribution)</procedure>
<procedure>(most-likely-pair distribution)</procedure>

Given a distribution returns the most likely value or pair of value
and probability.

==== Low-level API

<procedure>(draw-pair distribution)</procedure>

Given a distribution of the form ''((a . 0.1) (b . 0.5) (c . 0.4))''
will return ''(a . 0.1)'', ''(b . 0.5)'', and ''(c . 0.4)'' with the
specified probabilities. It will normalize the input distribution, any
remaining probability mass is placed on the last element of this
distribution, meaning that ''c'' would have probability 0.4 even if we
had specified some other value.

<procedure>(fold-distribution-thunk f i thunk)</procedure>

<procedure>(top-level-flip alpha)</procedure>
<procedure>(top-level-bottom)</procedure>
<procedure>(top-level-current-probability)</procedure>

<macro>(supportq ...)</macro>
<macro>(supportv ...)</macro>
<macro>(supportp ...)</macro>

<macro>(distributionq ...)</macro>
<macro>(distributionv ...)</macro>
<macro>(distributionp ...)</macro>

<macro>(fold-distribution ...)</macro>

<procedure>(support-thunk thunk)</procedure>
<procedure>(supportq-thunk thunk)</procedure>
<procedure>(supportv-thunk thunk)</procedure>
<procedure>(supportp-thunk p? thunk)</procedure>

<procedure>(probability-thunk thunk)</procedure>

<procedure>(expected-value-thunk plus times zero thunk)</procedure>

<procedure>(entropy-thunk thunk)</procedure>

<procedure>(distribution-thunk thunk)</procedure>
<procedure>(distributionq-thunk thunk)</procedure>
<procedure>(distributionv-thunk thunk)</procedure>
<procedure>(distributionp-thunk p? thunk)</procedure>

<procedure>(upon-bottom-thunk thunk)</procedure>

<procedure>(restrict-distribution! x distribution)</procedure>

<procedure>(gm-bound? x)</procedure>
<procedure>(gm-binding x)</procedure>

<procedure>(some-element p x)</procedure>
<procedure>(one-element p x)</procedure>
<procedure>(the-element p x)</procedure>
<procedure>(the-elements p x)</procedure>

<procedure>(attach-demon! demon x)</procedure>

Low-level procedures of interest to implementors, undocumented.

=== License

Copyright 2010-2012 Purdue University. All rights reserved.
This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Lesser Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.
This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Lesser Public License for more details.
You should have received a copy of the GNU General Lesser Public License
along with this program.  If not, see http://www.gnu.org/licenses.
